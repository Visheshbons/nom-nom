<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DEBUG CONSOLE - NOM NOM</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background: #0a0a0a;
            color: #00ff00;
            font-family: 'Courier New', 'Monaco', 'Menlo', monospace;
            overflow-x: hidden;
            min-height: 100vh;
            position: relative;
        }

        /* Matrix rain effect background */
        .matrix-bg {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            overflow: hidden;
            opacity: 0.1;
        }

        .matrix-column {
            position: absolute;
            top: -100px;
            color: #00ff00;
            font-size: 14px;
            line-height: 14px;
            animation: matrix-fall linear infinite;
            white-space: pre;
        }

        @keyframes matrix-fall {
            to {
                transform: translateY(100vh);
            }
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
            position: relative;
            z-index: 1;
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
            padding: 20px;
            border: 2px solid #00ff00;
            background: rgba(0, 255, 0, 0.05);
            box-shadow: 0 0 20px rgba(0, 255, 0, 0.3);
            animation: glow 2s ease-in-out infinite alternate;
        }

        @keyframes glow {
            from { box-shadow: 0 0 20px rgba(0, 255, 0, 0.3); }
            to { box-shadow: 0 0 30px rgba(0, 255, 0, 0.6); }
        }

        .header h1 {
            font-size: 2.5em;
            text-shadow: 0 0 10px #00ff00;
            letter-spacing: 3px;
        }

        .timestamp {
            color: #00cc00;
            margin-top: 10px;
        }

        .debug-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .debug-section {
            background: rgba(0, 0, 0, 0.8);
            border: 1px solid #00ff00;
            padding: 20px;
            border-radius: 5px;
            box-shadow: inset 0 0 10px rgba(0, 255, 0, 0.1);
        }

        .debug-section h2 {
            color: #00ff00;
            text-shadow: 0 0 5px #00ff00;
            margin-bottom: 15px;
            border-bottom: 1px solid #00ff00;
            padding-bottom: 5px;
            font-size: 1.2em;
        }

        .debug-item {
            margin: 8px 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .debug-label {
            color: #00cc00;
            font-weight: bold;
        }

        .debug-value {
            color: #00ff00;
            text-align: right;
            font-family: monospace;
        }

        .status-ok {
            color: #00ff00;
            text-shadow: 0 0 3px #00ff00;
        }

        .status-warning {
            color: #ffaa00;
            text-shadow: 0 0 3px #ffaa00;
        }

        .status-error {
            color: #ff0000;
            text-shadow: 0 0 3px #ff0000;
        }

        .logs-section {
            grid-column: 1 / -1;
        }

        .logs-header {
            display: flex;
            background: rgba(0, 255, 0, 0.1);
            border: 2px solid #00ff00;
            border-bottom: none;
            border-radius: 5px 5px 0 0;
            font-family: 'Courier New', Monaco, monospace;
            font-size: 0.85em;
            font-weight: bold;
            color: #00ff00;
            text-shadow: 0 0 5px rgba(0, 255, 0, 0.5);
        }

        .timestamp-header {
            flex: 0 0 220px;
            padding: 12px 15px;
            border-right: 3px solid #00ff00;
            text-align: center;
            background: rgba(0, 255, 0, 0.05);
        }

        .content-header {
            flex: 1;
            padding: 12px 15px;
            text-align: center;
            background: rgba(0, 0, 0, 0.2);
        }

        .logs-container {
            background: #000;
            border: 2px solid #00ff00;
            border-top: none;
            max-height: 500px;
            overflow-y: auto;
            border-radius: 0 0 5px 5px;
            box-shadow: inset 0 0 20px rgba(0, 255, 0, 0.1);
            display: flex;
            flex-direction: column;
        }

        .log-entry {
            display: flex;
            margin: 2px 0;
            background: rgba(0, 255, 0, 0.02);
            font-size: 0.9em;
            border-bottom: 1px solid rgba(0, 255, 0, 0.1);
        }

        .log-entry:hover {
            background: rgba(0, 255, 0, 0.05);
        }

        .log-timestamp {
            flex: 0 0 220px;
            padding: 10px 15px;
            background: linear-gradient(135deg, rgba(0, 255, 0, 0.08), rgba(0, 255, 0, 0.02));
            border-right: 3px solid #00ff00;
            font-family: 'Courier New', Monaco, monospace;
            font-size: 0.75em;
            color: #00ff88;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            text-shadow: 0 0 5px rgba(0, 255, 0, 0.3);
            display: flex;
            align-items: center;
            position: relative;
        }

        .log-timestamp::before {
            content: "‚óè";
            color: #00ff00;
            margin-right: 8px;
            font-size: 0.6em;
            animation: pulse 2s infinite;
        }

        .log-content {
            flex: 1;
            padding: 10px 15px;
            white-space: pre-wrap;
            word-break: break-word;
            color: #00ff00;
            line-height: 1.4;
            background: rgba(0, 0, 0, 0.2);
        }

        @keyframes pulse {
            0%, 100% { opacity: 0.4; }
            50% { opacity: 1; }
        }

        /* Responsive design for mobile */
        @media (max-width: 768px) {
            .logs-header {
                flex-direction: column;
            }

            .timestamp-header, .content-header {
                flex: none;
                border-right: none;
                border-bottom: 1px solid #00ff00;
                padding: 8px 12px;
            }

            .content-header {
                border-bottom: none;
            }

            .log-entry {
                flex-direction: column;
            }

            .log-timestamp {
                flex: none;
                border-right: none;
                border-bottom: 2px solid #00ff00;
                font-size: 0.7em;
                padding: 6px 12px;
                text-align: center;
            }

            .log-content {
                padding: 8px 12px;
                font-size: 0.85em;
            }
        }

        @media (max-width: 480px) {
            .logs-container {
                max-height: 400px;
            }

            .log-timestamp {
                padding: 4px 8px;
                font-size: 0.65em;
            }

            .log-content {
                padding: 6px 8px;
                font-size: 0.8em;
            }
        }

        .progress-bar {
            width: 100%;
            height: 20px;
            background: #002200;
            border: 1px solid #00ff00;
            border-radius: 3px;
            overflow: hidden;
            margin: 10px 0;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #00ff00, #00cc00);
            transition: width 0.3s ease;
            box-shadow: 0 0 10px rgba(0, 255, 0, 0.5);
        }

        .menu-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 5px 0;
            border-bottom: 1px solid #003300;
        }

        .menu-item:last-child {
            border-bottom: none;
        }

        .stock-indicator {
            padding: 2px 8px;
            border-radius: 3px;
            font-size: 0.8em;
            font-weight: bold;
        }

        .stock-ok {
            background: rgba(0, 255, 0, 0.2);
            color: #00ff00;
        }

        .stock-low {
            background: rgba(255, 170, 0, 0.2);
            color: #ffaa00;
        }

        /* Timeslot grid styling */
        .timeslot-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(80px, 1fr));
            gap: 8px;
            margin-top: 10px;
        }

        .timeslot-item {
            padding: 8px 12px;
            border: 2px solid;
            border-radius: 5px;
            text-align: center;
            font-weight: bold;
            font-size: 0.9em;
            cursor: default;
            transition: all 0.3s ease;
            position: relative;
        }

        .timeslot-available {
            border-color: #00ff00;
            background: rgba(0, 255, 0, 0.1);
            color: #00ff00;
            box-shadow: 0 0 5px rgba(0, 255, 0, 0.3);
        }

        .timeslot-booked {
            border-color: #ff4444;
            background: rgba(255, 68, 68, 0.1);
            color: #ff4444;
            box-shadow: 0 0 5px rgba(255, 68, 68, 0.3);
        }

        .timeslot-booked::after {
            content: "BOOKED";
            position: absolute;
            top: -8px;
            right: -8px;
            background: #ff4444;
            color: #000;
            font-size: 0.6em;
            padding: 2px 4px;
            border-radius: 3px;
            font-weight: bold;
        }

        .refresh-btn {
            position: fixed;
            top: 20px;
            right: 20px;
            background: #00ff00;
            color: #000;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-family: 'Courier New', monospace;
            font-weight: bold;
            box-shadow: 0 0 10px rgba(0, 255, 0, 0.5);
            transition: all 0.3s ease;
        }

        .refresh-btn:hover {
            background: #00cc00;
            box-shadow: 0 0 20px rgba(0, 255, 0, 0.8);
            transform: scale(1.05);
        }

        /* Scrollbar styling */
        ::-webkit-scrollbar {
            width: 12px;
        }

        ::-webkit-scrollbar-track {
            background: #001100;
        }

        ::-webkit-scrollbar-thumb {
            background: #00ff00;
            border-radius: 6px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: #00cc00;
        }

        /* Terminal-style typing effect */
        .typing {
            overflow: hidden;
            border-right: 2px solid #00ff00;
            white-space: nowrap;
            animation: typing 3s steps(40, end), blink-cursor 0.75s step-end infinite;
        }

        @keyframes typing {
            from { width: 0; }
            to { width: 100%; }
        }

        @keyframes blink-cursor {
            from, to { border-color: transparent; }
            50% { border-color: #00ff00; }
        }
    </style>
</head>
<body>
    <!-- Matrix rain background -->
    <div class="matrix-bg" id="matrix"></div>

    <button class="refresh-btn" onclick="location.reload()">REFRESH</button>

    <div class="container">
        <div class="header">
            <h1 class="typing">DEBUG CONSOLE</h1>
            <div class="timestamp">TIMESTAMP: <%= data.timestamp %></div>
            <div class="timestamp">RELOADING IN: <span id="countdown">30</span> seconds</div>
        </div>

        <div class="debug-grid">
            <!-- Server Status -->
            <div class="debug-section">
                <h2>‚ñ∫ SERVER STATUS</h2>
                <div class="debug-item">
                    <span class="debug-label">UPTIME:</span>
                    <span class="debug-value status-ok" id="uptime"><%= Math.floor(data.server.uptime / 3600) %>h <%= Math.floor((data.server.uptime % 3600) / 60) %>m <%= Math.floor(data.server.uptime % 60) %>s</span>
                </div>
                <div class="debug-item">
                    <span class="debug-label">PORT:</span>
                    <span class="debug-value"><%= data.server.port %></span>
                </div>
                <div class="debug-item">
                    <span class="debug-label">SESSION ID:</span>
                    <span class="debug-value"><%= data.server.sessionId %></span>
                </div>
                <div class="debug-item">
                    <span class="debug-label">MEMORY USAGE:</span>
                    <span class="debug-value"><%= (data.server.memory.heapUsed / 1024 / 1024).toFixed(2) %> MB</span>
                </div>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: <%= (data.server.memory.heapUsed / data.server.memory.heapTotal * 100) %>%"></div>
                </div>
            </div>

            <!-- Order Statistics -->
            <div class="debug-section">
                <h2>‚ñ∫ ORDER STATISTICS</h2>
                <div class="debug-item">
                    <span class="debug-label">TOTAL ORDERS:</span>
                    <span class="debug-value status-ok"><%= data.orders.total %></span>
                </div>
                <div class="debug-item">
                    <span class="debug-label">PENDING:</span>
                    <span class="debug-value <%= data.orders.pending > 0 ? 'status-warning' : 'status-ok' %>"><%= data.orders.pending %></span>
                </div>
                <div class="debug-item">
                    <span class="debug-label">COMPLETED:</span>
                    <span class="debug-value status-ok"><%= data.orders.completed %></span>
                </div>
                <div class="debug-item">
                    <span class="debug-label">CONFIRMED:</span>
                    <span class="debug-value status-ok"><%= data.orders.confirmed %></span>
                </div>
            </div>

            <!-- Configuration -->
            <div class="debug-section">
                <h2>‚ñ∫ SYSTEM CONFIG</h2>
                <div class="debug-item">
                    <span class="debug-label">ORDER LIMIT:</span>
                    <span class="debug-value"><%= data.config.orderLimit %></span>
                </div>
                <div class="debug-item">
                    <span class="debug-label">BAN LIMIT:</span>
                    <span class="debug-value"><%= data.config.banLimit %></span>
                </div>
                <div class="debug-item">
                    <span class="debug-label">SELF PING:</span>
                    <span class="debug-value <%= data.config.selfPing ? 'status-ok' : 'status-warning' %>"><%= data.config.selfPing ? 'ENABLED' : 'DISABLED' %></span>
                </div>
                <div class="debug-item">
                    <span class="debug-label">ADMIN SESSIONS:</span>
                    <span class="debug-value"><%= data.sessions.activeAdminSessions %></span>
                </div>
            </div>

            <!-- Menu Inventory -->
            <div class="debug-section">
                <h2>‚ñ∫ MENU INVENTORY</h2>
                <% data.menu.forEach(item => { %>
                <div class="menu-item">
                    <span class="debug-label"><%= item.name.toUpperCase() %>:</span>
                    <div>
                        <span class="debug-value"><%= item.stock %></span>
                        <span class="stock-indicator <%= item.lowStock ? 'stock-low' : 'stock-ok' %>">
                            <%= item.lowStock ? 'LOW' : 'OK' %>
                        </span>
                    </div>
                </div>
                <% }) %>
            </div>

            <!-- Time Slots Status -->
            <div class="debug-section" style="grid-column: span 2;">
                <h2>‚ñ∫ TIME SLOTS AVAILABILITY</h2>
                <div style="display: flex; justify-content: space-between; margin-bottom: 15px;">
                    <div class="debug-item" style="margin: 0;">
                        <span class="debug-label">TOTAL: </span>
                        <span class="debug-value"><%= data.timeSlots.allSlots.length %></span>
                    </div>
                    <div class="debug-item" style="margin: 0;">
                        <span class="debug-label">AVAILABLE: </span>
                        <span class="debug-value status-ok"><%= data.timeSlots.totalAvailable %></span>
                    </div>
                    <div class="debug-item" style="margin: 0;">
                        <span class="debug-label">BOOKED: </span>
                        <span class="debug-value <%= data.timeSlots.totalBooked > 0 ? 'status-warning' : 'status-ok' %>"><%= data.timeSlots.totalBooked %></span>
                    </div>
                </div>

                <div class="debug-label" style="margin-bottom: 10px;">TIME SLOT SELECTION:</div>
                <div class="timeslot-grid">
                    <% data.timeSlots.allSlots.forEach(slot => { %>
                        <div class="timeslot-item <%= data.timeSlots.bookedSlots.includes(slot) ? 'timeslot-booked' : 'timeslot-available' %>">
                            <%= slot %>
                        </div>
                    <% }) %>
                </div>

                <div style="display: flex; gap: 20px; margin-top: 15px; font-size: 0.8em;">
                    <div style="display: flex; align-items: center; gap: 5px;">
                        <div class="timeslot-item timeslot-available" style="padding: 4px 8px; font-size: 0.7em;">12:30</div>
                        <span class="debug-value">Available</span>
                    </div>
                    <div style="display: flex; align-items: center; gap: 5px;">
                        <div class="timeslot-item timeslot-booked" style="padding: 4px 8px; font-size: 0.7em;">12:30</div>
                        <span class="debug-value">Booked</span>
                    </div>
                </div>
            </div>

            <!-- Orders List -->
            <div class="debug-section" style="grid-column: span 2;">
                <h2>‚ñ∫ RECENT ORDERS</h2>
                <div style="display: flex; justify-content: space-between; margin-bottom: 15px; font-size: 0.9em;">
                    <div>
                        <span class="debug-label">TOTAL:</span>
                        <span class="debug-value"><%= data.orders.total %></span>
                    </div>
                    <div>
                        <span class="debug-label">PENDING:</span>
                        <span class="debug-value <%= data.orders.pending > 0 ? 'status-warning' : 'status-ok' %>"><%= data.orders.pending %></span>
                    </div>
                    <div>
                        <span class="debug-label">COMPLETED:</span>
                        <span class="debug-value status-ok"><%= data.orders.completed %></span>
                    </div>
                    <div>
                        <span class="debug-label">CONFIRMED:</span>
                        <span class="debug-value status-ok"><%= data.orders.confirmed %></span>
                    </div>
                </div>

                <div style="max-height: 400px; overflow-y: auto;">
                    <% if (data.orders.list && data.orders.list.length > 0) { %>
                        <% data.orders.list.forEach((order, index) => { %>
                            <div class="debug-item" style="border: 1px solid #003300; margin-bottom: 10px; padding: 12px; border-radius: 5px; background: rgba(0,0,0,0.3); align-items: flex-start;">
                                <div style="width: 100%;">
                                    <!-- Order Header -->
                                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                                        <div>
                                            <span class="debug-label">ORDER #<%= order.id %></span>
                                            <span class="stock-indicator <%= order.status === 'pending' ? 'stock-low' : 'stock-ok' %>" style="margin-left: 10px;">
                                                <%= order.status.toUpperCase() %>
                                            </span>
                                        </div>
                                        <div class="debug-value" style="font-size: 0.8em;">
                                            <%= new Date(order.timestamp).toLocaleString() %>
                                        </div>
                                    </div>

                                    <!-- Order Details Grid -->
                                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 8px; font-size: 0.85em;">
                                        <div>
                                            <span class="debug-label">CUSTOMER:</span>
                                            <span class="debug-value"><%= order.customerName %></span>
                                        </div>
                                        <div>
                                            <span class="debug-label">EMAIL:</span>
                                            <span class="debug-value" style="font-size: 0.8em;"><%= order.customerEmail %></span>
                                        </div>
                                        <div>
                                            <span class="debug-label">ITEM:</span>
                                            <span class="debug-value"><%= order.item %></span>
                                        </div>
                                        <div>
                                            <span class="debug-label">QUANTITY:</span>
                                            <span class="debug-value"><%= order.quantity %>x</span>
                                        </div>
                                        <div>
                                            <span class="debug-label">TIME SLOT:</span>
                                            <span class="debug-value status-warning"><%= order.timeSlot %></span>
                                        </div>
                                        <div>
                                            <span class="debug-label">TOTAL:</span>
                                            <span class="debug-value status-ok">$<%= order.total.toFixed(2) %></span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        <% }) %>
                    <% } else { %>
                        <div class="debug-item" style="text-align: center; padding: 20px;">
                            <span class="debug-label">NO ORDERS FOUND</span>
                            <div class="debug-value status-ok" style="margin-top: 5px;">SYSTEM READY FOR NEW ORDERS</div>
                        </div>
                    <% } %>
                </div>
            </div>

            <!-- System Logs -->
            <div class="debug-section logs-section">
                <h2>‚ñ∫ SYSTEM LOGS (LAST 50)</h2>
                <div class="logs-header">
                    <div class="timestamp-header">TIMESTAMP</div>
                    <div class="content-header">LOG CONTENT</div>
                </div>
                <div class="logs-container">
                    <% data.logs.forEach(log => { %>
                    <div class="log-entry">
                        <div class="log-timestamp">
                            <%= log.timestamp ? new Date(log.timestamp).toLocaleTimeString('en-US', {
                                hour12: false,
                                hour: '2-digit',
                                minute: '2-digit',
                                second: '2-digit'
                            }) + '.' + new Date(log.timestamp).getMilliseconds().toString().padStart(3, '0') : '' %>
                        </div>
                        <div class="log-content"><%= log.content || log %></div>
                    </div>
                    <% }) %>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Matrix rain effect
        function createMatrixRain() {
            const matrix = document.getElementById('matrix');
            const characters = 'qwertyuiop[]\\asdfghjkl;\'zxcvbnm,./{}|:"<>?1234567890-=!@#$%^&*()_+`~';

            for (let i = 0; i < 50; i++) {
                const column = document.createElement('div');
                column.className = 'matrix-column';
                column.style.left = Math.random() * 100 + '%';
                column.style.animationDuration = (Math.random() * 3 + 2) + 's';
                column.style.animationDelay = Math.random() * 2 + 's';

                let text = '';
                for (let j = 0; j < 20; j++) {
                    text += characters.charAt(Math.floor(Math.random() * characters.length)) + '\n';
                }
                column.textContent = text;

                matrix.appendChild(column);
            }
        }


        // Countdown timer and uptime counter
        let countdownSeconds = 30;
        let serverStartTime = Date.now() - (<%= data.server.uptime %> * 1000);

        function updateCounters() {
            // Update countdown
            const countdownElement = document.getElementById('countdown');
            if (countdownElement) {
                countdownElement.textContent = countdownSeconds;
                countdownSeconds--;

                if (countdownSeconds < 0) {
                    location.reload();
                    return;
                }
            }

            // Update uptime
            const uptimeElement = document.getElementById('uptime');
            if (uptimeElement) {
                const currentUptime = (Date.now() - serverStartTime) / 1000;
                const hours = Math.floor(currentUptime / 3600);
                const minutes = Math.floor((currentUptime % 3600) / 60);
                const seconds = Math.floor(currentUptime % 60);
                uptimeElement.textContent = `${hours}h ${minutes}m ${seconds}s`;
            }
        }

        // Update counters every second
        setInterval(updateCounters, 1000);

        // Auto-refresh every 30 seconds
        setTimeout(() => {
            // 1. Create a new URL object based on the current page's location.
            const url = new URL(window.location.href);

            // 2. Add or update the 'reload' search parameter.
            url.searchParams.set('reload', 'true');

            // 3. Navigate to the new URL, which triggers a full page reload.
            window.location.href = url.toString();
        }, 30000);

        // Initialize matrix effect
        createMatrixRain();

        // Console welcome message
        console.log('%cüîß DEBUG CONSOLE LOADED üîß', 'color: #00ff00; font-size: 16px; font-weight: bold;');
        console.log('%cMatrix initialized...', 'color: #00ff00;');
        console.log('%cAuto-refresh in 30 seconds', 'color: #00cc00;');
    </script>
</body>
</html>
